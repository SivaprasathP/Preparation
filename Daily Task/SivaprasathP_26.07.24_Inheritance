#1  Write a hierarchy of geometric shape classes 'Circle', 'Rectangle', etc inherited from a common base class 'Shape'

package task;

public class Shape {
	double area;
	double perimeter;
}
class Circle extends Shape{
	double radius;
	
	public double area() {
		return Math.PI*radius*radius;
	}
}
class Rectangle extends Shape{
	double width;
	double height;
	
	public double area() {
		return width*height;
	}
}
class Square extends Shape{
	double side;
	
	public double area() {
		return side*side;
	}
}



#2 Design a Student Parent class and ZSGSStudent Child class. 
Create constructors in both class with varying number of parameters. 
Call parent constructor from child constructor. Try experimenting by creating child object using parent constructor.

package task;

public class Student {
	String name;
	int id;
	
	public Student(String name, int id) {
		this.name = name;
		this.id = id;
	}
	
	public Student(String name) {
		this.name = name;
	}
	
	public Student(int id) {
		this.id = id;
	}
	
	public Student() {
		
	}
}

class ZSGSStudent extends Student{
	int batch;

	public ZSGSStudent(String name, int id, int batch) {
		super(name, id);
		this.batch = batch;
	}

	public ZSGSStudent(int batch) {
		this.batch = batch;
	}
	
	public ZSGSStudent() {
		
	}
	
	public static void main(String[] args) {
		ZSGSStudent zsgs=new ZSGSStudent("Siva",21,3);
	}
}




#3 Create Vehicle Hierarchy
package task;

public class Vehicle {
	String name;
	byte wheels;
	byte doors;
	int cc;
	
	public Vehicle(String name, byte wheels, byte doors,int cc) {
		this.name = name;
		this.wheels = wheels;
		this.doors = doors;
		this.cc=cc;
	}
	
	void start() {
		System.out.println("Vehicle is started");
	}
	void stop() {
		System.out.println("Vehicle is stopped");
	}
}

class Car extends Vehicle{
	String typeOfCar;

	public Car(String name, byte wheels, byte doors, String type,int cc) {
		super(name, wheels, doors,cc);
		this.typeOfCar = type;
	}
	
	
}

class Bike extends Vehicle{
	String typeOfBike;

	public Bike(String name, byte wheels, byte doors, int cc, String typeOfBike) {
		super(name, wheels, doors, cc);
		this.typeOfBike = typeOfBike;
	}
}

class Truck extends Vehicle{
	int loadCapacity;

	public Truck(String name, byte wheels, byte doors, int cc, int loadCapacity) {
		super(name, wheels, doors, cc);
		this.loadCapacity = loadCapacity;
	}
	
	
}




#4  Create classes for the given class diagram - https://www.geeksforgeeks.org/class-diagram-for-library-management-system/
package Library;

public class LibraryManagementSystem {
	String usertype;
	String userName;
	String password;
	
	void logIn() {
		
	}
	
	void register() {
		
	}
	
	void logOut() {
		
	}
}

public class User extends LibraryManagementSystem{
	String name;
	int id;
	
	void verify() {
		
	}
	
	void checkAccount() {
		
	}
	
	void getBookInfo() {
		
	}
}

class Student extends User{
	String className;
	
}

class Staff extends User{
	String dept;
}

public class Account {
	int noBorrowedBooks;
	int noReservedBooks;
	int noReturnedBooks;
	int noLostBooks;
	int fineamount;
	
	void calculateFine() {
		
	}
}


public class Book {
	 String title;
	 String author;
	 String ISBN;
	 String Publication;
	 
	 
	 void showDuedt() {
		 
	 }
	 
	 void reservationStatus() {
		 
	 }
	 void feedback() {
		 
	 }
	 void bookRequest() {
		 
	 }
	 void renewInfo() {
		 
	 }
}


public class Librarian {
	String Name;
	int id;
	String password;
	String searchString;
	
	void verifyLibrarian() {
		
	}
	
	void search() {
		
	}
}

public class LibraryDatabase {
	static int listOfBooks;
	
	void add() {
		
	}
	void delete() {
		
	}
	void update() {
		
	}
	void display() {
		
	}
	void search() {
		
	}
}



#5 exercism

class Fighter {

    boolean isVulnerable() {
        return true;
    }

    int getDamagePoints(Fighter fighter) {
        return 1;
    }
}


class Warrior extends Fighter{
    @Override
    public String toString(){
        return "Fighter is a Warrior";
    }

    @Override
    boolean isVulnerable() {
        return false;
    }

    @Override
    int getDamagePoints(Fighter fighter) {
        if(fighter.isVulnerable()){
            return 10;
        }else{
            return 6;
        }
    }
}


class Wizard extends Fighter{
    boolean isSpell;

    @Override
    public String toString(){
        return "Fighter is a Wizard";
    }

    void prepareSpell(){
        isSpell=true;
    }

    @Override
    boolean isVulnerable(){
        return !isSpell;
    }

    @Override
    int getDamagePoints(Fighter fighter){
        if(isSpell){
            return 12;
        }
        return 3;
    }
}
