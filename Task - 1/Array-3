//maxSpan
public int maxSpan(int[] nums) {
  int res=0;
  for(int i=0;i<nums.length;i++){
    int sum=1;
    for(int j=i+1;j<nums.length;j++){
      if(nums[i]==nums[j]){
        sum=Math.max(sum,j-i+1);
      }
    }
    res=Math.max(sum,res);
  }
  return res;
}


//fix34
public int[] fix34(int[] nums) {
  int fourPos=0;
  
  for(int i=0;i<nums.length-1;i++){
    if(nums[i]==3){
      int temp=nums[i+1];
      for(int j=fourPos;j<nums.length;j++){
        if(nums[j]==4){
          nums[j]=temp;
          fourPos=j+1;
          j=nums.length;//for breaking inner loop
        }
      }
      nums[i+1]=4;
    }
  }
  
  return nums;
}


//fix45
public int[] fix45(int[] nums) {
  for(int i=0;i<nums.length;i++){
    if(nums[i]==5 && i==0 || nums[i]==5 && nums[i-1]!=4){
      for(int j=0;j<nums.length-1;j++){
        if(nums[j]==4 && nums[j+1]!=5){
          int temp=nums[j+1];
          nums[j+1]=5;
          nums[i]=temp;//5 at index i
          break;
        }
      }
    }
  }
  
  return nums;
}


//canBalance
public boolean canBalance(int[] nums) {
  for(int i=0;i<nums.length;i++){
    int sum=0;
    for(int j=0;j<=i;j++){
      sum+=nums[j];
    }
    
    for(int j=i+1;j<nums.length;j++){
      sum-=nums[j];
    }
    
    if(sum==0){
      return true;
    }
  }
  return false;
}


//linerIn
public boolean linearIn(int[] outer, int[] inner) {
  int indexInner=0,indexOuter=0;
  
  while(indexInner<inner.length && indexOuter<outer.length){
    if(outer[indexOuter]==inner[indexInner]){
      indexInner++;
      indexOuter++;
    }else{
      indexOuter++;
    }
  }
  
  return indexInner==inner.length;
}


//squareUp
public int[] squareUp(int n) {
  int[] arr=new int[n*n];
  
  int currVal=1,val=n;
  for(int i=arr.length-1;i>=0;i--){
    arr[i]=currVal;
    
    if(currVal==val){
      val--;
      currVal=0;
      i=i-n+val+1;
    }
    currVal++;
  }
  
  return arr;
}


//seriesUp
public int[] seriesUp(int n) {
  int length=(n*(n+1))/2;
  
  int[] arr=new int[length];
  int currVal=1,val=1;
  
  for(int i=0;i<length;i++){
    arr[i]=currVal;
    
    if(currVal==val){
      val++;
      currVal=0;
    }
    currVal++;
  }
  
  return arr;
}


//maxMirror
public int maxMirror(int[] nums) {
  int res=0,count=0;
  for(int i=0;i<nums.length;i++){
    count=0;
    for(int j=nums.length-1;j>-1 && i+count<nums.length;j--){
      if(nums[i+count]==nums[j]){
        count++;
      }else if(count>0){
        res=Math.max(res,count);
        count=0;
      }
    }
    res=Math.max(res,count);
  }
  
  return res;
}


//countClumps
public int countClumps(int[] nums) {
  int res=0;
  for(int i=0;i<nums.length-1;i++){
    if(nums[i]==nums[i+1]){
      int j=i+1;
      while(j<nums.length && nums[i]==nums[j]){
        j++;
      }
      res++;
      i=j-1;
    }
  }
  return res;
}

