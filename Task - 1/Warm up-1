//SleepIn
public boolean sleepIn(boolean weekday, boolean vacation) {
  if(!weekday || vacation){
    return true;
  }
  return false;
}

//monkeyTrouble
public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {
  //it follows xor property
  if(aSmile^bSmile){
    return false;
  }
  return true;
}

//sumDouble
public int sumDouble(int a, int b) {
  if(a==b){
    return (a+b)*2;
  }
  
  return a+b;
}

//diff21
public int diff21(int n) {
  if(n>21){
    return (n-21)*2;
  }
  
  return 21-n;
}

//parrotTrouble
public boolean parrotTrouble(boolean talking, int hour) {
  if(!talking){
    return false;
  }
  
  return (hour<7 || hour>20);
}

//makes10
public boolean makes10(int a, int b) {
  return ((a==10 || b==10) || (a+b==10));
}

//nearHundred
public boolean nearHundred(int n) {
  return Math.abs(n-100)<=10 || Math.abs(n-200)<=10;
}

//posNeg
public boolean posNeg(int a, int b, boolean negative) {
  if(negative){
    return (a<0 && b<0);
  }
  
  return (a<0 && b>0) || (b<0 && a>0);
}

//notString
public String notString(String str) {
  if(str.length()>=3 && str.substring(0,3).equals("not")){
    return str;
  }
  return "not "+str;
}

//missingChar
public String missingChar(String str, int n) {
  return str.substring(0,n)+str.substring(n+1);
}

//frontBack
public String frontBack(String str) {
  if(str.length()<=1){
    return str;
  }
  
  char c1=str.charAt(0);
  char c2=str.charAt(str.length()-1);
  
  return c2+str.substring(1,str.length()-1)+c1;
}

//front3
public String front3(String str) {
  if(str.length()<3){
    return str+str+str;
  }
  
  String first=str.substring(0,3);
  
  return first+first+first;
}

//backAround
public String backAround(String str) {
  char c=str.charAt(str.length()-1);
  
  return c+str+c;
}

//or35
public boolean or35(int n) {
  if(n%3==0 || n%5==0){
    return true;
  }
  
  return false;
}

//front22
public String front22(String str) {
  if(str.length()<2){
    return str+str+str;
  }
  String first=str.substring(0,2);
  
  return first+str+first;
}

//startHi
public boolean startHi(String str) {
  if(str.length()<2){
    return false;
  }
  String s=str.substring(0,2);
  
  return s.equals("hi");
}

//icyHot
public boolean icyHot(int temp1, int temp2) {
  if((temp1<0 && temp2>100) || (temp1>100 && temp2<0)){
    return true;
  }
  return false;
}

//in1020
public boolean in1020(int a, int b) {
  return (a>=10 && a<=20) || (b>=10 && b<=20);
}

//hasTeen
public boolean hasTeen(int a, int b, int c) {
    return (a>=13 && a<=19) || (b>=13 && b<=19) || (c>=13 && c<=19);
}

//loneTeen
public boolean loneTeen(int a, int b) {
  boolean aTeen=(a>=13 && a<=19);
  boolean bTeen=(b>=13 && b<=19);
  
  return (aTeen && !bTeen) || (!aTeen && bTeen);
}

//delDel
public String delDel(String str) {
  int index=str.indexOf("del");
  
  if(index==1){
    return str.substring(0,index)+str.substring(index+3,str.length());
  }
  
  return str;
}

//mixStart
public boolean mixStart(String str) {
  if(str.length()<3){
    return false;
  }
  String mix=str.substring(1,3);
  
  return mix.equals("ix");
}

//startOz
public String startOz(String str) {
  String res="";
  
  if(str.length()>0 && str.charAt(0)=='o'){
    res+='o';
  }
  
  if(str.length()>1 && str.charAt(1)=='z'){
    res+='z';
  }
  return res;
}

//intMax
public int intMax(int a, int b, int c) {
  int max=Math.max(a,b);
  max=Math.max(max,c);
  return max;
}

//close10
public int close10(int a, int b) {
  int d1=Math.abs(a-10);
  int d2=Math.abs(b-10);
  
  if(d1<d2){
    return a;
  }else if(d2<d1){
    return b;
  }
  return 0;
}

//in3050
public boolean in3050(int a, int b) {
  boolean in30=(a>=30 && a<=40) && (b>=30 && b<=40);
  boolean in50=(a>=40 && a<=50) && (b>=40 && b<=50);
  
  return in30 || in50;
}

//max1020
public int max1020(int a, int b) {
  if((a>=10 && a<=20) && (b>10 && b<=20)){
    return Math.max(a,b);
  }else if(a>=10 && a<=20){
    return a;
  }else if(b>=10 && b<=20){
    return b;
  }
  return 0;
}

//stringE
public boolean stringE(String str) {
  int count=0;
  
  for(char c:str.toCharArray()){
    if(c=='e') count++;
  }
  
  return count>=1 && count<=3;
}

//lastDigit
public boolean lastDigit(int a, int b) {
  return a%10==b%10;
}

//endUp
public String endUp(String str) {
  if(str.length()<3){
    return str.toUpperCase();
  }
  
  int index=str.length()-3;
  return str.substring(0,index) + str.substring(index,str.length()).toUpperCase();
}

//everyNth
public String everyNth(String str, int n) {
  String res="";
  
  for(int i=0;i<str.length();i+=n){
    res+=str.charAt(i);
  }
  return res;
}
