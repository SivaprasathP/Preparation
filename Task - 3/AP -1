//scoresIncreasing
public boolean scoresIncreasing(int[] scores) {
  for(int i=0;i<scores.length-1;i++){
    if(scores[i]>scores[i+1]){
      return false;
    }
  }
  return true;
}


//scores100
public boolean scores100(int[] scores) {
  for(int i=0;i<scores.length-1;i++){
    if(scores[i]==100 && scores[i+1]==100){
      return true;
    }
  }
  return false;
}


//scoresClump
public boolean scoresClump(int[] scores) {
  for(int i=1;i<scores.length-1;i++){
    int x=scores[i+1]-scores[i];
    int y=scores[i+1]-scores[i-1];
    
    if(x>=0 && x<=2 && y>=0 && y<=2){
      return true;
    }
  }
  return false;
  
}


//scoresAverage
public int scoresAverage(int[] scores) {
  int avg1=average(scores,0,scores.length/2);
  int avg2=average(scores,scores.length/2,scores.length);
  
  return Math.max(avg1,avg2);
}
public int average(int[] scores,int start,int end){
  int sum=0,count=0;
  for(int i=start;i<end;i++){
    sum+=scores[i];
    count++;
  }
  return sum/count;
}


//wordsCount
public int wordsCount(String[] words, int len) {
  int count=0;
  for(String s:words){
    if(s.length()==len) count++;
  }
  return count;
}


//wordsFront
public String[] wordsFront(String[] words, int n) {
  String[] res=new String[n];
  int index=0;
  
  for(int i=0;i<n;i++){
    res[index++]=words[i];
  }
  return res;
}


//wordsWithoutList
public List wordsWithoutList(String[] words, int len) {
  List<String> res=new ArrayList<>();
  for(String s:words){
    if(s.length()!=len){
      res.add(s);
    }
  }
  return res;
}


//hasOne
public boolean hasOne(int n) {
  while(n>0){
    if(n%10==1){
      return true;
    }
    n=n/10;
  }
  return false;
}


//dividesSelf
public boolean dividesSelf(int n) {
  int temp=n;
  while(temp>0){
    int rem=temp%10;
    if(rem==0 || n%rem!=0){
      return false;
    }
    temp=temp/10;
  }
  return true;
}


//copyEvens
public int[] copyEvens(int[] nums, int count) {
  int[] res=new int[count];
  
  int index=0;
  for(int i=0;i<nums.length && index<count;i++){
    if(nums[i]%2==0){
      res[index++]=nums[i];
    }
  }
  
  return res;
}


//copyEndy
public int[] copyEndy(int[] nums, int count) {
  int[] res=new int[count];
  int index=0;
  
  for(int i=0;i<nums.length && index<count;i++){
    if((nums[i]<=10 && nums[i]>=0)  || (nums[i]>=90 && nums[i]<=100)){
      res[index++]=nums[i];
    }
  }
  
  return res;
}


//matchUp
public int matchUp(String[] a, String[] b) {
  int count=0;
  for(int i=0;i<a.length;i++){
      if(a[i].length()>0 && b[i].length()>0){
        if(a[i].charAt(0)==b[i].charAt(0)){
          count++;
        }
      }
  }
  return count;
}


//scoreUp
public int scoreUp(String[] key, String[] answers) {
  int count=0;
  for(int i=0;i<key.length;i++){
    if(key[i].equals(answers[i])){
      count+=4;
    }else if(answers[i].equals("?")){
      continue;
    }else{
      count--;
    }
  }
  return count;
}


//wordsWithout
public String[] wordsWithout(String[] words, String target) {
  int count=0;
  for(String s:words){
    if(!s.equals(target)){
      count++;
    }
  }
  
  String[] arr=new String[count];
  int index=0;
  for(String s:words){
    if(!s.equals(target)){
      arr[index++]=s;
    }
  }
  
  return arr;
}


//scoresSpecial
public int scoresSpecial(int[] a, int[] b) {
  int max1=helper(a);
  int max2=helper(b);
  
  return max1+max2;
}
public int helper(int[] arr){
  int max=0;
  for(int i:arr){
    if(i%10==0){
      max=Math.max(i,max);
    }
  }
  
  return max;
}


//sumHeights
public int sumHeights(int[] heights, int start, int end) {
  int sum=0;
  for(int i=start;i<end;i++){
    sum+=Math.abs(heights[i]-heights[i+1]);
  }
  return sum;
}


//sumHeights2
public int sumHeights2(int[] heights, int start, int end) {
  int count=0;
  for(int i=start;i<end;i++){
    if(heights[i]<heights[i+1]){
      count+=(heights[i+1] - heights[i])*2;
    }else{
      count+=heights[i]-heights[i+1];
    }
  }
  return count;
}


//bigHeights
public int bigHeights(int[] heights, int start, int end) {
  int count=0;
  for(int i=start;i<end;i++){
    int d=Math.abs(heights[i+1]-heights[i]);
    if(d>=5){
      count++;
    }
  }
  return count;
}


//userCompare
public int userCompare(String aName, int aId, String bName, int bId) {
  int i=aName.compareTo(bName);
  if(i<0){
    return -1;
  }
  
  if(i==0){
    if(aId>bId){
      return 1;
    }else if(aId<bId){
      return -1;
    }else{
      return 0;
    }
  }

  return 1;
}


//mergeTwo
public String[] mergeTwo(String[] a, String[] b, int n) {
  String[] res=new String[n];
  int i=0,j=0,k=0;
  
  while(i<a.length && j<b.length && k<n){
    int x=a[i].compareTo(b[j]);
    
    if(x==0){
      res[k++]=a[i];
      i++;
      j++;
    }else if(x<0){
      res[k++]=a[i];
      i++;
    }else{
      res[k++]=b[j];
      j++;
    }
  }
  
  return res;
}


//commonTwo
public int commonTwo(String[] a, String[] b) {
  int i=0,j=0;
  
  int count=0;
  while(i<a.length && j<b.length){
    int d=a[i].compareTo(b[j]);
    if(d<0){
      i++;
    }else if(d>0){
      j++;
    }else{//they are same
      count++;
      String oldStr=a[i];
      while(i<a.length && a[i].equals(oldStr)){
        i++;
      }
      
      while(j<b.length && b[j].equals(oldStr)){
        j++;
      }
    }
  }
  
  return count;
}

