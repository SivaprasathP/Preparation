//word0
public Map<String, Integer> word0(String[] strings) {
  Map<String,Integer> map=new HashMap<>();
  for(String s:strings){
    map.put(s,0);
  }
  return map;
}


//wordLen
public Map<String, Integer> wordLen(String[] strings) {
  Map<String,Integer> map=new HashMap<>();
  for(String s:strings){
    map.put(s,s.length());
  }
  return map;
}


//pairs
public Map<String, String> pairs(String[] strings) {
  Map<String,String> map=new HashMap<>();
  for(String s:strings){
    map.put(s.substring(0,1),s.substring(s.length()-1));
  }
  return map;
}


//wordCount
public Map<String, Integer> wordCount(String[] strings) {
  Map<String,Integer> map=new HashMap<>();
  for(String s:strings){
    map.put(s,map.getOrDefault(s,0)+1);
  }
  return map;
}


//firstChar
public Map<String, String> firstChar(String[] strings) {
  Map<String,String> map=new HashMap<>();
  for(String s:strings){
    if(map.containsKey(s.substring(0,1))){
      String temp=map.get(s.substring(0,1));
      map.put(s.substring(0,1),temp+s);
    }else{
      map.put(s.substring(0,1),s);
    }
  }
  return map;
}


//wordAppend
public String wordAppend(String[] strings) {
  String res="";
  Map<String,Integer> map=new HashMap<>();
  for(String s:strings){
    map.put(s,map.getOrDefault(s,0)+1);
    
    if(map.get(s)==2 || map.get(s)==4 || map.get(s)==6){
      res+=s;
    }
  }
  return res;
}


//wordMultiple
public Map<String, Boolean> wordMultiple(String[] strings) {
  Map<String,Boolean> map=new HashMap<>();
  for(String s:strings){
    if(map.containsKey(s)){
      map.put(s,true);
    }else{
      map.put(s,false);
    }
  }
  return map;
}


//allSwap
public String[] allSwap(String[] strings) {
  Map<String,Integer> map=new HashMap<>();
  for(int i=0;i<strings.length;i++){
    String s=strings[i];
    if(s.length()>0){
      if(map.containsKey(s.substring(0,1))){
        int index=map.get(s.substring(0,1));
        strings[i]=strings[index];
        strings[index]=s;
        map.remove(s.substring(0,1));
      }else{
        map.put(s.substring(0,1),i);
      }
    }
  }
  return strings;
}


//firstSwap
public String[] firstSwap(String[] strings) {
  Map<String,Integer> map=new HashMap<>();
  for(int i=0;i<strings.length;i++){
    String s=strings[i];
    if(s.length()>0){
      if(map.containsKey(s.substring(0,1))){
        if(map.get(s.substring(0,1))==-1){
          continue;
        }
        int index=map.get(s.substring(0,1));
        strings[i]=strings[index];
        strings[index]=s;
        map.put(s.substring(0,1),-1);
      }else{
        map.put(s.substring(0,1),i);
      }
    }
  }
  return strings;
}
